package socket.service.appMessage;

import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.net.SocketException;
import java.net.SocketTimeoutException;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import socket.beans.InDataBean;
import socket.util.LoUtils;
public class AppMessageSocketService {
	
	
	private static Log log = LogFactory.getLog(AppMessageSocketService.class);

	/**
	 * 初始化方法
	 * 
	 * @see com.forward.proxy.service.ServiceThread#init(java.net.Socket)
	 */
	public void init(final Socket socket) {
		log.info("Socket接入：" + socket.getInetAddress().getHostAddress() + ":" + socket.getPort());
		new ServiceThread(socket);
	}

	/**
	 * 接收数据
	 * 
	 */
	class ServiceThread extends Thread {
		private Socket socket;
		private DataInputStream dis = null;
		private DataOutputStream dos = null;

		private boolean connected = false;//关闭连接
		private static final int HEAD_LEN = 2;
		private static final int BUFSIZE = 1024;

		int recvMsgSize;//报文长度
		byte[] lenBuf = new byte[HEAD_LEN]; // 报文长度读取容器

		public ServiceThread(Socket socket) {
			super();
			this.socket = socket;

			try {
//				this.socket.setSoTimeout(60000); //设置超时 10 分钟
				this.socket.setKeepAlive(true);
				dis = new DataInputStream(socket.getInputStream());
				dos = new DataOutputStream(socket.getOutputStream());
				
				connected = true;
				start();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		public void run() {
			while (connected) {
				try {
					if (this.socket == null || this.socket.isClosed()) {
						return;
					}
					
					String s = null;
					// 1.读取报文长度
					int read = dis.read(lenBuf);
					System.out.println("Read head length：" + read);
					if (read != HEAD_LEN) {
						// 记录读取报文出错
						System.out.println("读取服务器或者APP报文出错：读取报文长度出错");
						return;
					}

					// 2.转报文长度
					String lenStr = LoUtils.byte2HexStr(lenBuf);
					System.out.println("Package length[HEX]：" + lenStr);
					
					int packLen = 0;
					try {
						packLen = Integer.parseInt(lenStr.trim(), 16);
						System.out.println("Package length[OCT]: " + packLen);
					} catch (Exception e) {
						// 读取长度出错
						return;
					}

					// 3.根据报文长度读取数据
					ByteArrayOutputStream baos = new ByteArrayOutputStream(packLen);
					byte[] receiveBuff = new byte[BUFSIZE];
					read = dis.read(receiveBuff);
					System.out.println("Read package length: " + read);
					long readLen = 0;

					while (read != -1) {
						readLen += read;
						baos.write(receiveBuff, 0, read);
						if (readLen < packLen) {
							read = dis.read(receiveBuff);
						} else {
							break;
						}
					}

					if (readLen != packLen) {
						// 读取报文出错，应读["+packLen+"],实读["+readLen+"]
						System.out.println(
								"读取服务器或者APP报文出错:应读[" + packLen + "]字节,实读["
										+ readLen + "]字节");
						
						return;
					}
					
					s = LoUtils.byte2HexStr(baos.toByteArray());
					baos.close();
					
					s = lenStr + s;
					System.out.println("Package content: " + s);

					// 数据解析
					InDataBean inDataBean = new InDataBean(LoUtils.hexStr2Str(s.substring(4)));
					if(inDataBean != null){
						System.out.println(inDataBean.toString());
						// 交给数据解析类解析数据，并做相应的处理
						String result = AppMessageCommand.doRequest(inDataBean,socket);
						System.out.println("返回报文：" + result);
						dos.write(result.getBytes());
						dos.flush();
					}

				} catch (SocketTimeoutException e) {
					System.out.println("socket time out!");
				} catch (SocketException e) {
					System.out.println("Connection reset!");
				} catch (Exception e) {
					e.printStackTrace();
				} catch (Throwable t) {
					try {
						throw new Exception(t.getMessage());
					} catch (Exception e) {
						e.printStackTrace();
					}
				} finally {
					try {
//						if (dos != null) dos.close();
//						if (dis != null) dis.close();
//						if (socket != null) socket.close();
					} catch (Throwable t) {

					}
					// 关闭连接标识
					connected = true;
				}
			}
		}
	}
}
