package test.command;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.java.common.util.Constains;
import com.java.common.util.HttpResponseUtil;
import com.java.common.util.StringUtil;
import com.java.common.vo.VoResponse;
import com.java.plugins.winning.inpatient.service.QueryDocListService;
import com.java.plugins.winning.inpatient.vo.WinningRequest;
import com.java.plugins.winning.inpatient.vo.WinningResponse;
import com.java.servlet.inDataBean.DocListInDataBean;
import com.java.servlet.inDataBean.LoginInDataBean;
import com.java.servlet.outDataBean.DocListOutDataBean;
import com.java.servlet.outDataBean.LoginOutDataBean;

@WebServlet("/test/DocList")
public class DocListServlet extends HttpServlet {

	
	
	
	boolean test = false;
	/**
		 * Constructor of the object.
		 */
	public DocListServlet() {
		super();
	}

	/**
		 * Destruction of the servlet. <br>
		 */
	public void destroy() {
		super.destroy(); // Just puts "destroy" string in log
		// Put your code here
	}

	/**
		 * The doGet method of the servlet. <br>
		 *
		 * This method is called when a form has its tag value method equals to get.
		 * 
		 * @param request the request send by the client to the server
		 * @param response the response send by the server to the client
		 * @throws ServletException if an error occurred
		 * @throws IOException if an error occurred
		 */
	public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		doPost(request,response);
	}

	/**
		 * The doPost method of the servlet. <br>
		 *
		 * This method is called when a form has its tag value method equals to post.
		 * 
		 * @param request the request send by the client to the server
		 * @param response the response send by the server to the client
		 * @throws ServletException if an error occurred
		 * @throws IOException if an error occurred
		 */
	public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		/***
		 * 将request解析为inDataBean
		 */
		DocListInDataBean inData=new DocListInDataBean();
		VoResponse voResponse = new VoResponse();
		try {
			inData.setUserId(request.getParameter("userId"));
			inData.setNowPage(request.getParameter("nowPage"));
			inData.setPageNum(request.getParameter("pageNum"));
			if (StringUtil.isEmpty(inData.getUserId()) || StringUtil.isEmpty(inData.getNowPage())||StringUtil.isEmpty(inData.getPageNum())) {
				throw new Exception("参数不能为空");
			}
		} catch (Exception e) {
			voResponse.setRet_code(Constains.ERROR_CODE);
			voResponse.setRet_msg("参数异常：" + e.getMessage());
			HttpResponseUtil.response(voResponse, response);
			return;
		}
		
		/***
		 * 将inDataBean转换为winning的request
		 */
		WinningResponse responseW= new WinningResponse();
		if(!test){
		Map param = new HashMap();
		param.put("No_staff", inData.getUserId());
		param.put("nowPage", inData.getNowPage());
		param.put("pageNum", inData.getPageNum());
		WinningRequest requestW = new WinningRequest();
		requestW.setParam(param);
		/***
		 * 调用winning的服务进行业务请求
		 */
	    responseW = QueryDocListService.QueryDocList(requestW);
		}
		else
		{
			Map testData = new HashMap();
			testData.put("userId","01" );
			testData.put("StaffName","001" );
			testData.put("cPatientName", "张权");
			testData.put("cPatientCode","87065" );
			testData.put("iBookId","1003" );
			testData.put("BookName","pic" );
			testData.put("PatSex","女" );
			testData.put("PatAge","17" );
			testData.put("RequestTime","2017-01-01 15:30:30" );
			testData.put("RequestName","李四" );
			testData.put("RequestDept", "牙科");
			testData.put("RequestTitl", "处长");
			testData.put("RequestTel", "16747562837");
			
			testData.put("userId","02" );
			testData.put("StaffName","002" );
			testData.put("cPatientName", "张急");
			testData.put("cPatientCode","87066" );
			testData.put("iBookId","1004" );
			testData.put("BookName","text" );
			testData.put("PatSex","男" );
			testData.put("PatAge","18" );
			testData.put("RequestTime","2017-01-01 15:30:30" );
			testData.put("RequestName","李光" );
			testData.put("RequestDept", "牙科");
			testData.put("RequestTitl", "处长");
			testData.put("RequestTel", "163337562837");
			
			testData.put("userId","03" );
			testData.put("StaffName","002" );
			testData.put("cPatientName", "张都");
			testData.put("cPatientCode","87066" );
			testData.put("iBookId","1005" );
			testData.put("BookName","pic" );
			testData.put("PatSex","女" );
			testData.put("PatAge","17" );
			testData.put("RequestTime","2017-01-03 15:30:30" );
			testData.put("RequestName","李四" );
			testData.put("RequestDept", "牙科");
			testData.put("RequestTitl", "处长");
			testData.put("RequestTel", "16747562837");
			if(inData.getUserId().equals("123")){
				responseW.setRetCode("0000");
				responseW.setRetMsg("");
				responseW.setRetData(testData);
			}else{
				responseW.setRetCode("9999");
				responseW.setRetMsg("不存在此用户");
			}
			
		}
		/***
		 * 将winning的 response解析为vo 1.将retData字符串转换为json对象 2.遍历json数组，将多行数据放入list
		 * 3.使用工具类，将outData通过response响应给请求端
		 */
		List retData=new ArrayList();
		Map responseWretData = responseW.getRetData();
		if(responseW.isSuccess()){
			try{
				for(int i=0;i<3;i++){
				DocListOutDataBean outData = new DocListOutDataBean();
				outData.setPatientName(responseWretData.get("cPatientName").toString());
				outData.setPatientCode(responseWretData.get("cPatientCode").toString());
				outData.setBookId(responseWretData.get("iBookId").toString());
				outData.setBookName(responseWretData.get("BookName").toString());
				outData.setRequestTime(responseWretData.get("RequestTime").toString());
				outData.setPatSex(responseWretData.get("PatSex").toString());
				outData.setPatAge(responseWretData.get("PatAge").toString());
				outData.setRequestName(responseWretData.get("RequestName").toString());
				outData.setRequestDept(responseWretData.get("RequestDept").toString());
				outData.setRequestTitl(responseWretData.get("RequestTitl").toString());
				outData.setRequestTel("");
				retData.add(outData);
				}
				voResponse.setRet_code(Constains.SUCCESS_CODE);
				voResponse.setRet_msg(Constains.SUCCESS_MSG);
				voResponse.setRet_data(retData);
				voResponse.setRet_count(retData.size());
			}catch(Exception e){
				voResponse.setRet_code(Constains.ERROR_CODE);
				voResponse.setRet_msg("返回数据异常："+e.getMessage());
			}
			
		}else{
			voResponse.setRet_code(Constains.ERROR_CODE);
			voResponse.setRet_msg("访问异常:"+responseW.getRetMsg());
		}
		
		HttpResponseUtil.response(voResponse, response);
	}

	/**
		 * Initialization of the servlet. <br>
		 *
		 * @throws ServletException if an error occurs
		 */
	public void init() throws ServletException {
		// Put your code here
		String packageName = DocListServlet.class.getPackage().getName();
		if (packageName.indexOf("test.") >= 0)
			test = true;
	}
}
